---
import { contenidoProcesos } from '../data/contenidoProcesos.js';
---

<section class="seccion-procesos" id="procesos">
  <div class="contenedor">
    <div class="encabezado-seccion">
      <h2 class="titulo-seccion">Nuestros Procesos</h2>
      <p class="subtitulo-seccion">
        Más de 35 años perfeccionando cada etapa del proceso metalúrgico
      </p>
    </div>

    <div class="slider-contenedor">
      <button class="boton-nav boton-anterior" id="botonAnterior">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>

      <div class="slider-wrapper">
        <div class="slider-track" id="sliderTrack">
          {contenidoProcesos.map((proceso) => (
            <div class="tarjeta-proceso" data-proceso-id={proceso.id}>
              <div class="contenedor-video">
                <img 
                  src={proceso.portada} 
                  alt={proceso.nombre}
                  class="imagen-portada"
                  loading="lazy"
                />
                <video 
                  class="video-proceso"
                  muted
                  loop
                  preload="none"
                >
                  <source src={proceso.video} type="video/mp4" />
                </video>
                <div class="overlay-reproducir">
                  <div class="icono-play">
                    <svg viewBox="0 0 24 24" fill="currentColor">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
              </div>
              <div class="info-tarjeta">
                <h3 class="nombre-proceso">{proceso.nombre}</h3>
                <p class="descripcion-proceso">{proceso.descripcion}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <button class="boton-nav boton-siguiente" id="botonSiguiente">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    </div>

    <div class="indicadores" id="indicadores">
      {contenidoProcesos.map((_, index) => (
        <button 
          class={`indicador ${index === 0 ? 'activo' : ''}`}
          data-slide={index}
        ></button>
      ))}
    </div>
  </div>
</section>

<style>
.seccion-procesos {
  padding: 80px 0;
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  overflow: hidden;
}

.contenedor {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.encabezado-seccion {
  text-align: center;
  margin-bottom: 60px;
}

.titulo-seccion {
  font-size: 3rem;
  font-weight: 700;
  color: #0F4E67;
  margin: 0 0 16px 0;
  font-family: 'Roboto Condensed', sans-serif;
}

.subtitulo-seccion {
  font-size: 1.1rem;
  color: #64748b;
  margin: 0;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.slider-contenedor {
  position: relative;
  display: flex;
  align-items: center;
  gap: 20px;
}

.slider-wrapper {
  flex: 1;
  overflow: hidden;
  border-radius: 16px;
  position: relative;
}

.slider-track {
  display: flex;
  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  gap: 17px;
}

.tarjeta-proceso {
  flex: 0 0 calc(33.333% - 16px);
  background: white;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
}

.tarjeta-proceso:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
}

.contenedor-video {
  position: relative;
  width: 100%;
  height: 220px;
  overflow: hidden;
  background: #f1f5f9;
}

.imagen-portada,
.video-proceso {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: opacity 0.3s ease;
}

.video-proceso {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
}

.tarjeta-proceso:hover .video-proceso,
.tarjeta-proceso.reproduciendo .video-proceso {
  opacity: 1;
}

.tarjeta-proceso:hover .imagen-portada,
.tarjeta-proceso.reproduciendo .imagen-portada {
  opacity: 0;
}

.overlay-reproducir {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(15, 78, 103, 0.1);
  opacity: 1;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.tarjeta-proceso:hover .overlay-reproducir,
.tarjeta-proceso.reproduciendo .overlay-reproducir {
  opacity: 0;
}

.icono-play {
  width: 60px;
  height: 60px;
  background: rgba(15, 78, 103, 0.9);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  backdrop-filter: blur(10px);
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.tarjeta-proceso:hover .icono-play {
  transform: scale(1);
}

.icono-play svg {
  width: 24px;
  height: 24px;
  margin-left: 2px;
}

.info-tarjeta {
  padding: 24px;
}

.nombre-proceso {
  font-size: 1.25rem;
  font-weight: 600;
  color: #0F4E67;
  margin: 0 0 8px 0;
  font-family: 'Roboto Condensed', sans-serif;
}

.descripcion-proceso {
  font-size: 0.95rem;
  color: #64748b;
  line-height: 1.5;
  margin: 0;
}

.boton-nav {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  border: 2px solid #0F4E67;
  background: white;
  color: #0F4E67;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 2;
  flex-shrink: 0;
}

.boton-nav:hover {
  background: #0F4E67;
  color: white;
  transform: scale(1.1);
}

.boton-nav svg {
  width: 24px;
  height: 24px;
  stroke-width: 2.5;
}

.boton-nav:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: scale(1);
}

.boton-nav:disabled:hover {
  background: white;
  color: #0F4E67;
}

.indicadores {
  display: flex;
  justify-content: center;
  gap: 12px;
  margin-top: 40px;
}

.indicador {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  border: none;
  background: #cbd5e1;
  cursor: pointer;
  transition: all 0.3s ease;
}

.indicador.activo {
  background: #0F4E67;
  transform: scale(1.2);
}

.indicador:hover {
  background: #475569;
}

/* Responsive Design */
@media (max-width: 768px) {
  .seccion-procesos {
    padding: 60px 0;
  }
  
  .contenedor {
    padding: 0 16px;
  }
  
  .titulo-seccion {
    font-size: 2rem;
  }
  
  .subtitulo-seccion {
    font-size: 1rem;
  }
  
  .encabezado-seccion {
    margin-bottom: 40px;
  }
  
  .slider-contenedor {
    gap: 10px;
  }
  
  .boton-nav {
    display: none;
  }
  
  .tarjeta-proceso {
    flex: 0 0 100%;
  }
  
  .contenedor-video {
    height: 200px;
  }
  
  .info-tarjeta {
    padding: 20px;
  }
  
  .nombre-proceso {
    font-size: 1.1rem;
  }
  
  .descripcion-proceso {
    font-size: 0.9rem;
  }
  
  .indicadores {
    margin-top: 30px;
    gap: 8px;
  }
  
  .indicador {
    width: 10px;
    height: 10px;
  }

  .slider-track {
    gap: 0px;
  }
}

@media (max-width: 480px) {
  .contenedor-video {
    height: 180px;
  }
  
  .info-tarjeta {
    padding: 16px;
  }
  
  .titulo-seccion {
    font-size: 1.8rem;
  }

  .slider-track {
    gap: 0px;
  }

/* Tablet */
@media (min-width: 769px) and (max-width: 1024px) {
  .tarjeta-proceso {
    flex: 0 0 calc(50% - 12px);
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sliderTrack = document.getElementById('sliderTrack');
  const botonAnterior = document.getElementById('botonAnterior');
  const botonSiguiente = document.getElementById('botonSiguiente');
  const indicadores = document.querySelectorAll('.indicador');
  const tarjetas = document.querySelectorAll('.tarjeta-proceso');
  
  let indiceActual = 0;
  const totalProcesos = 8;
  
  // Variables para responsive
  let tarjetasPorVista = 3;
  let esMovil = false;
  
  function actualizarTarjetasPorVista() {
    const anchoVentana = window.innerWidth;
    if (anchoVentana <= 768) {
      tarjetasPorVista = 1;
      esMovil = true;
    } else if (anchoVentana <= 1024) {
      tarjetasPorVista = 2;
      esMovil = false;
    } else {
      tarjetasPorVista = 3;
      esMovil = false;
    }
  }
  
  function actualizarSlider() {
    const porcentajeDesplazamiento = -(indiceActual * (100 / tarjetasPorVista));
    sliderTrack.style.transform = `translateX(${porcentajeDesplazamiento}%)`;
    
    // Actualizar indicadores
    indicadores.forEach((indicador, index) => {
      indicador.classList.toggle('activo', index === indiceActual);
    });
    
    // Actualizar botones de navegación
    const maxIndice = totalProcesos - tarjetasPorVista;
    botonAnterior.disabled = indiceActual === 0;
    botonSiguiente.disabled = indiceActual >= maxIndice;
    
    // En móvil, reproducir el video de la tarjeta visible
    if (esMovil) {
      manejarReproduccionMovil();
    }
  }
  
  function manejarReproduccionMovil() {
    tarjetas.forEach((tarjeta, index) => {
      const video = tarjeta.querySelector('.video-proceso');
      if (index === indiceActual) {
        tarjeta.classList.add('reproduciendo');
        if (video) {
          video.currentTime = 0;
          video.play().catch(() => {}); // Ignorar errores de autoplay
        }
      } else {
        tarjeta.classList.remove('reproduciendo');
        if (video) {
          video.pause();
          video.currentTime = 0;
        }
      }
    });
  }
  
  function irASlide(indice) {
    const maxIndice = totalProcesos - tarjetasPorVista;
    indiceActual = Math.max(0, Math.min(indice, maxIndice));
    actualizarSlider();
  }
  
  // Event listeners para navegación
  botonAnterior.addEventListener('click', () => {
    irASlide(indiceActual - 1);
  });
  
  botonSiguiente.addEventListener('click', () => {
    irASlide(indiceActual + 1);
  });
  
  // Event listeners para indicadores
  indicadores.forEach((indicador, index) => {
    indicador.addEventListener('click', () => {
      irASlide(index);
    });
  });
  
  // Hover effect para desktop
  tarjetas.forEach((tarjeta) => {
    const video = tarjeta.querySelector('.video-proceso');
    const imagen = tarjeta.querySelector('.imagen-portada');
    
    if (!esMovil) {
      tarjeta.addEventListener('mouseenter', () => {
        if (video && !esMovil) {
          video.currentTime = 0;
          video.play().catch(() => {});
        }
      });
      
      tarjeta.addEventListener('mouseleave', () => {
        if (video && !esMovil) {
          video.pause();
          video.currentTime = 0;
        }
      });
    }
  });
  
  // Responsive handling
  function manejarRedimensionamiento() {
    const tarjetasPorVistaAnterior = tarjetasPorVista;
    const esMovilAnterior = esMovil;
    
    actualizarTarjetasPorVista();
    
    if (tarjetasPorVistaAnterior !== tarjetasPorVista || esMovilAnterior !== esMovil) {
      // Resetear videos cuando cambia el modo
      tarjetas.forEach((tarjeta) => {
        const video = tarjeta.querySelector('.video-proceso');
        tarjeta.classList.remove('reproduciendo');
        if (video) {
          video.pause();
          video.currentTime = 0;
        }
      });
      
      // Ajustar índice si es necesario
      const maxIndice = totalProcesos - tarjetasPorVista;
      if (indiceActual > maxIndice) {
        indiceActual = maxIndice;
      }
      
      actualizarSlider();
    }
  }
  
  // Touch/Swipe support para móviles
  let inicioToque = null;
  let finToque = null;
  
  sliderTrack.addEventListener('touchstart', (e) => {
    inicioToque = e.touches[0].clientX;
  });
  
  sliderTrack.addEventListener('touchmove', (e) => {
    if (!inicioToque) return;
    finToque = e.touches[0].clientX;
  });
  
  sliderTrack.addEventListener('touchend', () => {
    if (!inicioToque || !finToque) return;
    
    const diferencia = inicioToque - finToque;
    const umbralMinimo = 50;
    
    if (Math.abs(diferencia) > umbralMinimo) {
      if (diferencia > 0) {
        // Swipe izquierda - siguiente
        irASlide(indiceActual + 1);
      } else {
        // Swipe derecha - anterior
        irASlide(indiceActual - 1);
      }
    }
    
    inicioToque = null;
    finToque = null;
  });
  
  // Inicializar
  actualizarTarjetasPorVista();
  actualizarSlider();
  
  // Event listener para redimensionamiento
  window.addEventListener('resize', manejarRedimensionamiento);
  
  // Auto-play en móvil para la primera tarjeta
  if (esMovil) {
    setTimeout(() => {
      manejarReproduccionMovil();
    }, 500);
  }
});
</script>
</section>